const e=JSON.parse('{"key":"v-64c65dc8","path":"/daily/2024-03-05.html","title":"1.Java&JVM","lang":"zh-CN","frontmatter":{"cover":"/assets/images/cover2.jpg","icon":"pen-to-square","date":"2024-03-05T00:00:00.000Z","category":["面试准备"],"tag":["面试准备"],"star":true,"sticky":true,"description":"1.Java&amp;JVM 1.1.并发相关 1.1.1. ReentrantLock 1.1.1.1. lock 接口 1.公平锁流程: 直接进入acquire方法，先执行tryAcquire： tryAcquire排队，然后cas状态是否直接可以上锁 如果还是失败，再进队列，然后在acquireQueued方法中 for 循环，以及park等，具体路基如下 再park中唤醒过来，如果我是头结点，并且执行tryAcquire成功就是上锁成功，执行过程中报异常，取消抢锁 2.非公平锁流程: 1.cas判断当前状态是否没人使用,抢一下满足的直接上锁 2.cas失败进入acquire方法,先执行tryAcquire： tryAcquire也是不排队，直接cas状态是否直接可以上锁 如果还是失败，再进队列，然后在acquireQueued方法中 for 循环，以及park等，具体路基如下 再park中唤醒过来，如果我是头结点，并且执行tryAcquire成功就是上锁成功，执行过程中报异常，取消抢锁 总结：公平锁和非公平的锁，上锁的区别就在tryAcquire方法上","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/vuepress-blog/daily/2024-03-05.html"}],["meta",{"property":"og:site_name","content":"miyuki4jのblog"}],["meta",{"property":"og:title","content":"1.Java&JVM"}],["meta",{"property":"og:description","content":"1.Java&amp;JVM 1.1.并发相关 1.1.1. ReentrantLock 1.1.1.1. lock 接口 1.公平锁流程: 直接进入acquire方法，先执行tryAcquire： tryAcquire排队，然后cas状态是否直接可以上锁 如果还是失败，再进队列，然后在acquireQueued方法中 for 循环，以及park等，具体路基如下 再park中唤醒过来，如果我是头结点，并且执行tryAcquire成功就是上锁成功，执行过程中报异常，取消抢锁 2.非公平锁流程: 1.cas判断当前状态是否没人使用,抢一下满足的直接上锁 2.cas失败进入acquire方法,先执行tryAcquire： tryAcquire也是不排队，直接cas状态是否直接可以上锁 如果还是失败，再进队列，然后在acquireQueued方法中 for 循环，以及park等，具体路基如下 再park中唤醒过来，如果我是头结点，并且执行tryAcquire成功就是上锁成功，执行过程中报异常，取消抢锁 总结：公平锁和非公平的锁，上锁的区别就在tryAcquire方法上"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/vuepress-blog/assets/images/cover2.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-15T09:05:33.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"1.Java&JVM"}],["meta",{"property":"article:author","content":"miyuki4j"}],["meta",{"property":"article:tag","content":"面试准备"}],["meta",{"property":"article:published_time","content":"2024-03-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-15T09:05:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1.Java&JVM\\",\\"image\\":[\\"https://mister-hope.github.io/vuepress-blog/assets/images/cover2.jpg\\"],\\"datePublished\\":\\"2024-03-05T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-15T09:05:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"miyuki4j\\",\\"url\\":\\"https://github.com/miyuki4j\\",\\"email\\":\\"rebirthypp@gmail.com\\"}]}"]]},"headers":[{"level":2,"title":"1.1.并发相关","slug":"_1-1-并发相关","link":"#_1-1-并发相关","children":[{"level":3,"title":"1.1.1. ReentrantLock","slug":"_1-1-1-reentrantlock","link":"#_1-1-1-reentrantlock","children":[]},{"level":3,"title":"1.1.2. 分布式ReentrantLock","slug":"_1-1-2-分布式reentrantlock","link":"#_1-1-2-分布式reentrantlock","children":[]}]}],"git":{"createdTime":1710493533000,"updatedTime":1710493533000,"contributors":[{"name":"miyuki4j","email":"rebirthypp@163.com","commits":1}]},"readingTime":{"minutes":1.22,"words":366},"filePathRelative":"daily/2024-03-05.md","localizedDate":"2024年3月5日","excerpt":"<h1> 1.Java&amp;JVM</h1>\\n<h2> 1.1.并发相关</h2>\\n<h3> 1.1.1. ReentrantLock</h3>\\n<h4> 1.1.1.1. lock 接口</h4>\\n<div class=\\"language-code line-numbers-mode\\" data-ext=\\"code\\"><pre class=\\"language-code\\"><code>1.公平锁流程:\\n  直接进入acquire方法，先执行tryAcquire：\\n    tryAcquire排队，然后cas状态是否直接可以上锁\\n    如果还是失败，再进队列，然后在acquireQueued方法中 for 循环，以及park等，具体路基如下\\n      再park中唤醒过来，如果我是头结点，并且执行tryAcquire成功就是上锁成功，执行过程中报异常，取消抢锁\\n\\n\\n2.非公平锁流程:\\n  1.cas判断当前状态是否没人使用,抢一下满足的直接上锁\\n  2.cas失败进入acquire方法,先执行tryAcquire：\\n    tryAcquire也是不排队，直接cas状态是否直接可以上锁\\n    如果还是失败，再进队列，然后在acquireQueued方法中 for 循环，以及park等，具体路基如下\\n      再park中唤醒过来，如果我是头结点，并且执行tryAcquire成功就是上锁成功，执行过程中报异常，取消抢锁\\n\\n总结：公平锁和非公平的锁，上锁的区别就在tryAcquire方法上\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
